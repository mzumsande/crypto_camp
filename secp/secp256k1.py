from fast_exp import *
# secp256k1 field prime
P = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEFFFFFC2F
# Group order
N = 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141

class Point:
    def __init__(self, x, y, inf = False):
        if inf:
            self.x = 0
            self.y = 0
            self.inf = True
        else:
            self.x = x  % P
            self.y = y  % P
            self.inf = False

    def __eq__(self, other):
        if not isinstance(other, Point):
            return False
        if self.inf and other.inf:
            return True
        return self.x == other.x and self.y == other.y and self.inf == other.inf

    def is_inf(self):
        return self.inf

INF = Point(0, 0, True)

class JacobianPoint:
    def __init__(self, x, y, z):
            self.x = x % P
            self.y = y  % P
            self.z = z  % P

    def is_inf(self):
        return self.z == 0

    def to_affine(self):
        if self.is_inf():
            return INF

        z_inv = inv_mult(self.z, P)
        z_inv2 = z_inv * z_inv % P
        z_inv3 = z_inv2 * z_inv % P
        x_aff = self.x * z_inv2 % P
        y_aff = self.y * z_inv3 % P
        return Point(x_aff, y_aff)

JAC_INF = JacobianPoint(1,1,0)

# addition in affine coordinates
def secp256k1_add(a: Point, b: Point) -> Point:
    if a.is_inf():
        return b
    if b.is_inf():
        return a
    if a.x == b.x and (a.y + b.y) % P == 0:
        return INF
    if a.x == b.x and a.y == b.y:
        # Point doubling
        num = (3 * a.x * a.x) % P
        denom_inv = inv_mult((2 * a.y) % P, P)
        slope = (num * denom_inv) % P
    else:
        ydiff = (b.y - a.y) % P
        xdiff = (b.x - a.x) % P
        slope = (ydiff * inv_mult(xdiff, P)) % P
    xr = (slope * slope - a.x - b.x) % P
    yr = (slope * (a.x - xr) - a.y) % P
    return Point(xr, yr)

# addition in Jacobian coordinates
def secp256k1_add_jac(a: JacobianPoint, b: JacobianPoint) -> JacobianPoint:
    if a.is_inf():
        return b
    if b.is_inf():
        return a
    z1_squared = (a.z * a.z) % P
    z2_squared = (b.z * b.z) % P
    u = (a.x * z2_squared) % P
    h = ((b.x * z1_squared)  - u ) % P
    s = (a.y * b.z * z2_squared) % P
    r = ((b.y * a.z * z1_squared) - s) % P
    if h == 0:
        if r == 0:
            return jac_point_double(a)
        else:
            return JAC_INF
    xnew = (r * r - h * h* h - 2*u*h*h ) % P
    ynew = (r * (u * h *h - xnew) - s * h* h* h)  % P
    znew = (h * a.z * b.z) % P
    return JacobianPoint(xnew, ynew, znew)

def jac_point_double(a: JacobianPoint) -> JacobianPoint:
    if a.y == 0:
        return JAC_INF
    s = (4 * a.x * a.y * a.y) % P
    m = (3 * a.x * a.x) % P
    xnew = (m*m - 2* s) % P
    ynew = (m * (s - xnew) - 8 * a.y*a.y*a.y*a.y) % P
    znew = (2 * a.y * a.z ) % P
    return JacobianPoint(xnew, ynew, znew)

def secp256k1_scalar_mult(k: int, p: Point) -> Point:
    result = INF
    add_pow = p
    while k:
        if k & 1:
            result = secp256k1_add(result, add_pow)
        add_pow = secp256k1_add(add_pow, add_pow)
        k >>= 1
    return result

def secp256k1_is_on_curve(p: Point) -> bool:
    if p.is_inf():
        return True
    return (p.y * p.y - (p.x * p.x * p.x + 7)) % P == 0

def secp256k1_neg(p: Point) -> Point:
    return Point(p.x, (-p.y) % P)

# constants for tests
G = Point(0x79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798, 0x483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8)
LAMBDA = 0x5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72


# Test vectors
# secp256k1_is_on_curve
assert(secp256k1_is_on_curve(INF))
assert(secp256k1_is_on_curve(G))

# Point addition
assert(secp256k1_add(Point(67021774492365321256634043516869791044054964063002935266026048760627130221114, 22817883221438079958217963063610327523693969913024717835557258242342029550595), \
  Point(61124938217888369397608518626468079588341162087856379517664485009963441753645, 5723382937169086635766392599511664586625983027860520036338464885987365575658)) == \
 Point(78518484088348927894279633941273782106215956054783044881924083038087974375069, 18400956471605157290158330638123206056219981947313880254846397293938760781200))
assert(secp256k1_add(Point(44797955726860071483167773525787460171685721903803276437396496681708013097206, 112878323467240798018200025047246733779416351939079609883282945822975931592141), \
  Point(44797955726860071483167773525787460171685721903803276437396496681708013097206, 2913765770075397405370959961441174073853632726560954156174638184932903079522)) == \
  INF)
assert(secp256k1_add(Point(95200151225387174391707134980196577229773167465894787919263504089948495725202, 94213123740092242124032541289267941722641721980066680728855126898974205181980), \
    Point(95200151225387174391707134980196577229773167465894787919263504089948495725202, 94213123740092242124032541289267941722641721980066680728855126898974205181980)) == \
    Point(5909177817561749019375996132097716007690336893057112295739767175467136927121, 32162989297956602751967132742255814558956860587998309119003795115938320862381))
assert(secp256k1_add(Point(24050370140998638157368766089090079788245793492514664296883668741529047882113, 14478882322437672032054487172211630444001167135141445302555096737662467817571), \
    Point(15045863282447234231848775263852322721143017336655001075698483887751182719636, 14478882322437672032054487172211630444001167135141445302555096737662467817571)) == \
    Point(76695855813870323034353443655745505343881173836470898666875431378628604069914, 101313206914878523391516497836476277409268817530499118736902487270246366854092))
assert(secp256k1_add(Point(14256779447437936128616290794341059890063336098474125854681710102809814868320, 90566103014364716248988921534849031279541603477816641946022463390335657035131), \
    Point(2303067510121489830312323422056091166740725427601969990117485452141659178613, 25225986222951479174582063473838876573728381187823922093435120617573177636532)) == \
    Point(95430772898311369787541983276504378677140303663720683940530878996024106515165, 48068184564993462938397020947826677061288691733511084479824032705110581338856))

# Jacobian addition
assert(secp256k1_add_jac(JacobianPoint(61168739479711927142764658335960185139044138470269152817362835609619277248733, \
    21365265259791813296359020025112135293342760115353080382870338561918313862807, \
    37064183328797598544560694959943799168750358913858865780091974718018553562419),
    JacobianPoint(75776791705958340557958402430698975706422201066979121642449913138944604425660, \
        66383280047496136929271400526347103822935621943780462161181840552194350141564, \
        75975606300704613123930174557625573844043347281105167940536468038500802717509)).to_affine() ==
        Point(72863032945283280953636129059545959529634042357753453132026174732744194676931, 111529132148508388427246132585785101600429639308058372390604751264868469767543))

assert(secp256k1_add_jac(JacobianPoint(89959325059742944430358451400705002920926825355225869621717936807494095714290, \
    96093053924735119484524007701924861311484651710593769022900107977673928960245, \
    66142611799578950251083409575885695298839488135797694779041885661190727675299), \
    JacobianPoint(61152793683249667605361745755257610395039301799655537107480658643593848781730, \
        108824838086741573141078213715633247883899533027170274847878148878014138167046, \
        20026567909062914103680712539641599080083135680565932483453732406779235372092)).to_affine() == INF)

assert(secp256k1_add_jac(JacobianPoint(1547568827951595983041825486208171785819741431893371520256763714464258127790, \
    87153109579099129796596751254693228766379983077346253255841414029284516911078, \
    105104885998309941273615701006706417602105584887217436384728254947105995740715),
    JacobianPoint(102754269592907928248165438489539780821724369832426272173645274109108284691770, \
        38298190034438650883752719589335983487411860447931052099125319988280170002045, \
        56745928453254477537417735654158445415425453625586007664329168279192608303666)).to_affine() ==
        Point(21324256287414615615026299379536579336529998865990184416926039607504524853626, 96719670966356830360698314514227297774284915420887284954650836535688914930874))


#2. Scalar multiplication
assert(secp256k1_scalar_mult(23529072936145521956642440150769408702836782170707519110832596096096916532363, \
    Point(94777218176490725267733209794395406270863807953747235979017564313980479098344, 53121120406880321033414824968851949358991212541220678285657788880408683486672)) == \
Point(81492582484984365721511233996054540050314813088236204730182464710703690737195, 84165397430175583340352582740254662715932722835371860159802475562062898918484))
assert(secp256k1_scalar_mult(77770687059601253501098075906318324640585620643934538062621691587089455400301, \
    Point(5187380010089560191829928600869675928625207216422014112981972591844926771008, 75026050083095897004323393777174635055491620440662638678606562665317466685019)) == \
    Point(76999255841974189685876230118581110410155956505185745130247574937430232984638, 87571171775685157828750403037960903210473289232782306139148947195874900187006))
assert(secp256k1_scalar_mult(3747619523960563074315083315669137577217731866086110333821423552891044218266, \
    Point(66371586610273545144505648512343824229224003523952192165787799288317344396675, 6489011411151914877089190610663845093649879070897583530615192453262848111419)) == \
    Point(109441138145498884726545575659592733193661671281368885246963601136369148387669, 83708880322787879701338478937074052809697986569225329829504559758598509123336))

#3. Exercise 4
term1 = secp256k1_scalar_mult(5, G)
assert(secp256k1_is_on_curve(term1))
px = fast_exp(-6, (P+2)// 9, P)
p = Point(px, 1)
assert(secp256k1_is_on_curve(p))
term2 = secp256k1_neg(secp256k1_scalar_mult(LAMBDA, p))
assert(secp256k1_is_on_curve(term2))
sum = secp256k1_add(term1, term2)
assert(secp256k1_is_on_curve(sum))
inv3 = inv_mult(3, N)
result = secp256k1_scalar_mult(inv3, sum)
assert(result == Point(102789575885518142004075617409960363797999880716231247893197355566116867729452, \ # ends with 452
    26193801726694417157944169865435580241609755035114796993996200247754697317307))
